version: "3"

vars:
  PYTHON: python
  VENV_DIR: .venv
dotenv: [".env"]

tasks:
  # 初期環境構築用タスク
  init:
    desc: Initialize project.
    deps:
      - clean
    cmds:
      - git submodule init
      - git submodule update
      - "{{.PYTHON}} -m venv {{.VENV_DIR}}"
      - "{{.PYTHON_VENV}} -m pip install -r requirements.txt"
      - npm install
    vars:
      PYTHON_VENV:
        sh: |
          if [[ {{OS}} == "windows" ]]; then
            echo '{{.VENV_DIR}}\\Scripts\\python.exe'
          else  # darwin, linux
            echo '{{.VENV_DIR}}/bin/python'
          fi
  clean:
    # rmは環境によって利用できないのでgit cleanを利用する。
    desc: Clean files.
    cmds:
      - git clean -fdx {{.VENV_DIR}}
      - git clean -fdx node_modules
      - cd whisper.cpp && git clean -fdx whisper.cpp

  # linter, formatter
  lint:
    desc: Lint files.
    cmds:
      - "{{.PYTHON}} -m ruff check ."
      - npx prettier --check "**/*.md"
      - npx prettier --check "**/*.{yml,yaml}"
      - npx cspell lint . --no-progress
  format:
    desc: Format files.
    cmds:
      - "{{.PYTHON}} -m ruff format ."
      - npx prettier --write "**/*.md"
      - npx prettier --write "**/*.{yml,yaml}"

  # buld tools
  build:
    desc: Build tools.
    cmds:
      - task: build-pyannote
      - task: build-whisper
      - task: build-whisper-mac
  build-pyannote:
    desc: Download pyannote models.
    cmds:
      - python src/pyannote_download_model.py
  build-whisper:
    internal: true
    desc: Build whisper.cpp.
    dir: whisper.cpp
    platforms: ["linux", "windows"]
    cmds:
      - make large-v3
      - make clean
      - make -j
  build-whisper-mac:
    internal: true
    desc: Build whisper.cpp for CoreML.
    platforms: ["darwin"]
    dir: whisper.cpp
    cmds:
      - make clean
      - |
        {{.PYTHON}} -m venv .venv
        source .venv/bin/activate
        .venv/bin/python -m pip install -r ./models/requirements-coreml.txt
        make clean
        make large-v3
        ./models/generate-coreml-model.sh large-v3
        WHISPER_COREML=1 make -j

  run:
    desc: Convert speech to summary.
    cmds:
      - python src/speech_to_summary.py --device={{.DEVICE}} {{.VERBOSITY}} {{.FILE}}
    vars:
      DEVICE: '{{default "cpu" .DEVICE}}'
      VERBOSITY: '{{default "-v" .VERBOSITY}}'
      FILE: '{{default "" .FILE}}'

  # requirements.txtの更新用タスク
  # 実行後に下記の修正を手動で実施する必要がある。
  # - requirements.txtから"-e"で始まる行を削除する。
  update-requirements:
    desc: Update requirements.txt.
    cmds:
      - "{{.PYTHON}} -m venv {{.VENV_DIR}}"
      - defer: git clean -fdx {{.VENV_DIR}}
      - '{{.PYTHON_VENV}} -m pip install -e ".[dev,test]"'
      - "{{.PYTHON_VENV}} -m pip freeze > requirements.txt"
    vars:
      VENV_DIR: .venv-temp
      PYTHON_VENV:
        sh: |
          if [[ {{OS}} == "windows" ]]; then
            echo '{{.VENV_DIR}}\\Scripts\\python.exe'
          else  # darwin, linux
            echo '{{.VENV_DIR}}/bin/python'
          fi
